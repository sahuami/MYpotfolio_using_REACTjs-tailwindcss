"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-toastify";
exports.ids = ["vendor-chunks/react-toastify"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-toastify/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/react-toastify/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bounce: () => (/* binding */ lt),\n/* harmony export */   Flip: () => (/* binding */ uo),\n/* harmony export */   Icons: () => (/* binding */ W),\n/* harmony export */   Slide: () => (/* binding */ mo),\n/* harmony export */   ToastContainer: () => (/* binding */ Lt),\n/* harmony export */   Zoom: () => (/* binding */ po),\n/* harmony export */   collapseToast: () => (/* binding */ Z),\n/* harmony export */   cssTransition: () => (/* binding */ $),\n/* harmony export */   toast: () => (/* binding */ y)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* __next_internal_client_entry_do_not_use__ Bounce,Flip,Icons,Slide,ToastContainer,Zoom,collapseToast,cssTransition,toast auto */ function Mt(t) {\n    if (!t || typeof document == \"undefined\") return;\n    let o = document.head || document.getElementsByTagName(\"head\")[0], e = document.createElement(\"style\");\n    e.type = \"text/css\", o.firstChild ? o.insertBefore(e, o.firstChild) : o.appendChild(e), e.styleSheet ? e.styleSheet.cssText = t : e.appendChild(document.createTextNode(t));\n}\nMt(`:root{--toastify-color-light: #fff;--toastify-color-dark: #121212;--toastify-color-info: #3498db;--toastify-color-success: #07bc0c;--toastify-color-warning: #f1c40f;--toastify-color-error: hsl(6, 78%, 57%);--toastify-color-transparent: rgba(255, 255, 255, .7);--toastify-icon-color-info: var(--toastify-color-info);--toastify-icon-color-success: var(--toastify-color-success);--toastify-icon-color-warning: var(--toastify-color-warning);--toastify-icon-color-error: var(--toastify-color-error);--toastify-container-width: fit-content;--toastify-toast-width: 320px;--toastify-toast-offset: 16px;--toastify-toast-top: max(var(--toastify-toast-offset), env(safe-area-inset-top));--toastify-toast-right: max(var(--toastify-toast-offset), env(safe-area-inset-right));--toastify-toast-left: max(var(--toastify-toast-offset), env(safe-area-inset-left));--toastify-toast-bottom: max(var(--toastify-toast-offset), env(safe-area-inset-bottom));--toastify-toast-background: #fff;--toastify-toast-padding: 14px;--toastify-toast-min-height: 64px;--toastify-toast-max-height: 800px;--toastify-toast-bd-radius: 6px;--toastify-toast-shadow: 0px 4px 12px rgba(0, 0, 0, .1);--toastify-font-family: sans-serif;--toastify-z-index: 9999;--toastify-text-color-light: #757575;--toastify-text-color-dark: #fff;--toastify-text-color-info: #fff;--toastify-text-color-success: #fff;--toastify-text-color-warning: #fff;--toastify-text-color-error: #fff;--toastify-spinner-color: #616161;--toastify-spinner-color-empty-area: #e0e0e0;--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);--toastify-color-progress-dark: #bb86fc;--toastify-color-progress-info: var(--toastify-color-info);--toastify-color-progress-success: var(--toastify-color-success);--toastify-color-progress-warning: var(--toastify-color-warning);--toastify-color-progress-error: var(--toastify-color-error);--toastify-color-progress-bgo: .2}.Toastify__toast-container{z-index:var(--toastify-z-index);-webkit-transform:translate3d(0,0,var(--toastify-z-index));position:fixed;width:var(--toastify-container-width);box-sizing:border-box;color:#fff;display:flex;flex-direction:column}.Toastify__toast-container--top-left{top:var(--toastify-toast-top);left:var(--toastify-toast-left)}.Toastify__toast-container--top-center{top:var(--toastify-toast-top);left:50%;transform:translate(-50%);align-items:center}.Toastify__toast-container--top-right{top:var(--toastify-toast-top);right:var(--toastify-toast-right);align-items:end}.Toastify__toast-container--bottom-left{bottom:var(--toastify-toast-bottom);left:var(--toastify-toast-left)}.Toastify__toast-container--bottom-center{bottom:var(--toastify-toast-bottom);left:50%;transform:translate(-50%);align-items:center}.Toastify__toast-container--bottom-right{bottom:var(--toastify-toast-bottom);right:var(--toastify-toast-right);align-items:end}.Toastify__toast{--y: 0;position:relative;touch-action:none;width:var(--toastify-toast-width);min-height:var(--toastify-toast-min-height);box-sizing:border-box;margin-bottom:1rem;padding:var(--toastify-toast-padding);border-radius:var(--toastify-toast-bd-radius);box-shadow:var(--toastify-toast-shadow);max-height:var(--toastify-toast-max-height);font-family:var(--toastify-font-family);z-index:0;display:flex;flex:1 auto;align-items:center;word-break:break-word}@media only screen and (max-width: 480px){.Toastify__toast-container{width:100vw;left:env(safe-area-inset-left);margin:0}.Toastify__toast-container--top-left,.Toastify__toast-container--top-center,.Toastify__toast-container--top-right{top:env(safe-area-inset-top);transform:translate(0)}.Toastify__toast-container--bottom-left,.Toastify__toast-container--bottom-center,.Toastify__toast-container--bottom-right{bottom:env(safe-area-inset-bottom);transform:translate(0)}.Toastify__toast-container--rtl{right:env(safe-area-inset-right);left:initial}.Toastify__toast{--toastify-toast-width: 100%;margin-bottom:0;border-radius:0}}.Toastify__toast-container[data-stacked=true]{width:var(--toastify-toast-width)}.Toastify__toast--stacked{position:absolute;width:100%;transform:translate3d(0,var(--y),0) scale(var(--s));transition:transform .3s}.Toastify__toast--stacked[data-collapsed] .Toastify__toast-body,.Toastify__toast--stacked[data-collapsed] .Toastify__close-button{transition:opacity .1s}.Toastify__toast--stacked[data-collapsed=false]{overflow:visible}.Toastify__toast--stacked[data-collapsed=true]:not(:last-child)>*{opacity:0}.Toastify__toast--stacked:after{content:\"\";position:absolute;left:0;right:0;height:calc(var(--g) * 1px);bottom:100%}.Toastify__toast--stacked[data-pos=top]{top:0}.Toastify__toast--stacked[data-pos=bot]{bottom:0}.Toastify__toast--stacked[data-pos=bot].Toastify__toast--stacked:before{transform-origin:top}.Toastify__toast--stacked[data-pos=top].Toastify__toast--stacked:before{transform-origin:bottom}.Toastify__toast--stacked:before{content:\"\";position:absolute;left:0;right:0;bottom:0;height:100%;transform:scaleY(3);z-index:-1}.Toastify__toast--rtl{direction:rtl}.Toastify__toast--close-on-click{cursor:pointer}.Toastify__toast-icon{margin-inline-end:10px;width:22px;flex-shrink:0;display:flex}.Toastify--animate{animation-fill-mode:both;animation-duration:.5s}.Toastify--animate-icon{animation-fill-mode:both;animation-duration:.3s}.Toastify__toast-theme--dark{background:var(--toastify-color-dark);color:var(--toastify-text-color-dark)}.Toastify__toast-theme--light,.Toastify__toast-theme--colored.Toastify__toast--default{background:var(--toastify-color-light);color:var(--toastify-text-color-light)}.Toastify__toast-theme--colored.Toastify__toast--info{color:var(--toastify-text-color-info);background:var(--toastify-color-info)}.Toastify__toast-theme--colored.Toastify__toast--success{color:var(--toastify-text-color-success);background:var(--toastify-color-success)}.Toastify__toast-theme--colored.Toastify__toast--warning{color:var(--toastify-text-color-warning);background:var(--toastify-color-warning)}.Toastify__toast-theme--colored.Toastify__toast--error{color:var(--toastify-text-color-error);background:var(--toastify-color-error)}.Toastify__progress-bar-theme--light{background:var(--toastify-color-progress-light)}.Toastify__progress-bar-theme--dark{background:var(--toastify-color-progress-dark)}.Toastify__progress-bar--info{background:var(--toastify-color-progress-info)}.Toastify__progress-bar--success{background:var(--toastify-color-progress-success)}.Toastify__progress-bar--warning{background:var(--toastify-color-progress-warning)}.Toastify__progress-bar--error{background:var(--toastify-color-progress-error)}.Toastify__progress-bar-theme--colored.Toastify__progress-bar--info,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--success,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--warning,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--error{background:var(--toastify-color-transparent)}.Toastify__close-button{color:#fff;position:absolute;top:6px;right:6px;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:.7;transition:.3s ease;z-index:1}.Toastify__toast--rtl .Toastify__close-button{left:6px;right:unset}.Toastify__close-button--light{color:#000;opacity:.3}.Toastify__close-button>svg{fill:currentColor;height:16px;width:14px}.Toastify__close-button:hover,.Toastify__close-button:focus{opacity:1}@keyframes Toastify__trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}.Toastify__progress-bar{position:absolute;bottom:0;left:0;width:100%;height:100%;z-index:1;opacity:.7;transform-origin:left}.Toastify__progress-bar--animated{animation:Toastify__trackProgress linear 1 forwards}.Toastify__progress-bar--controlled{transition:transform .2s}.Toastify__progress-bar--rtl{right:0;left:initial;transform-origin:right;border-bottom-left-radius:initial}.Toastify__progress-bar--wrp{position:absolute;overflow:hidden;bottom:0;left:0;width:100%;height:5px;border-bottom-left-radius:var(--toastify-toast-bd-radius);border-bottom-right-radius:var(--toastify-toast-bd-radius)}.Toastify__progress-bar--wrp[data-hidden=true]{opacity:0}.Toastify__progress-bar--bg{opacity:var(--toastify-color-progress-bgo);width:100%;height:100%}.Toastify__spinner{width:20px;height:20px;box-sizing:border-box;border:2px solid;border-radius:100%;border-color:var(--toastify-spinner-color-empty-area);border-right-color:var(--toastify-spinner-color);animation:Toastify__spin .65s linear infinite}@keyframes Toastify__bounceInRight{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(3000px,0,0)}60%{opacity:1;transform:translate3d(-25px,0,0)}75%{transform:translate3d(10px,0,0)}90%{transform:translate3d(-5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutRight{20%{opacity:1;transform:translate3d(-20px,var(--y),0)}to{opacity:0;transform:translate3d(2000px,var(--y),0)}}@keyframes Toastify__bounceInLeft{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(-3000px,0,0)}60%{opacity:1;transform:translate3d(25px,0,0)}75%{transform:translate3d(-10px,0,0)}90%{transform:translate3d(5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutLeft{20%{opacity:1;transform:translate3d(20px,var(--y),0)}to{opacity:0;transform:translate3d(-2000px,var(--y),0)}}@keyframes Toastify__bounceInUp{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,3000px,0)}60%{opacity:1;transform:translate3d(0,-20px,0)}75%{transform:translate3d(0,10px,0)}90%{transform:translate3d(0,-5px,0)}to{transform:translateZ(0)}}@keyframes Toastify__bounceOutUp{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,-2000px,0)}}@keyframes Toastify__bounceInDown{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,-3000px,0)}60%{opacity:1;transform:translate3d(0,25px,0)}75%{transform:translate3d(0,-10px,0)}90%{transform:translate3d(0,5px,0)}to{transform:none}}@keyframes Toastify__bounceOutDown{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,2000px,0)}}.Toastify__bounce-enter--top-left,.Toastify__bounce-enter--bottom-left{animation-name:Toastify__bounceInLeft}.Toastify__bounce-enter--top-right,.Toastify__bounce-enter--bottom-right{animation-name:Toastify__bounceInRight}.Toastify__bounce-enter--top-center{animation-name:Toastify__bounceInDown}.Toastify__bounce-enter--bottom-center{animation-name:Toastify__bounceInUp}.Toastify__bounce-exit--top-left,.Toastify__bounce-exit--bottom-left{animation-name:Toastify__bounceOutLeft}.Toastify__bounce-exit--top-right,.Toastify__bounce-exit--bottom-right{animation-name:Toastify__bounceOutRight}.Toastify__bounce-exit--top-center{animation-name:Toastify__bounceOutUp}.Toastify__bounce-exit--bottom-center{animation-name:Toastify__bounceOutDown}@keyframes Toastify__zoomIn{0%{opacity:0;transform:scale3d(.3,.3,.3)}50%{opacity:1}}@keyframes Toastify__zoomOut{0%{opacity:1}50%{opacity:0;transform:translate3d(0,var(--y),0) scale3d(.3,.3,.3)}to{opacity:0}}.Toastify__zoom-enter{animation-name:Toastify__zoomIn}.Toastify__zoom-exit{animation-name:Toastify__zoomOut}@keyframes Toastify__flipIn{0%{transform:perspective(400px) rotateX(90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(400px) rotateX(-20deg);animation-timing-function:ease-in}60%{transform:perspective(400px) rotateX(10deg);opacity:1}80%{transform:perspective(400px) rotateX(-5deg)}to{transform:perspective(400px)}}@keyframes Toastify__flipOut{0%{transform:translate3d(0,var(--y),0) perspective(400px)}30%{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(-20deg);opacity:1}to{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(90deg);opacity:0}}.Toastify__flip-enter{animation-name:Toastify__flipIn}.Toastify__flip-exit{animation-name:Toastify__flipOut}@keyframes Toastify__slideInRight{0%{transform:translate3d(110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInLeft{0%{transform:translate3d(-110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInUp{0%{transform:translate3d(0,110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInDown{0%{transform:translate3d(0,-110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideOutRight{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(110%,var(--y),0)}}@keyframes Toastify__slideOutLeft{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(-110%,var(--y),0)}}@keyframes Toastify__slideOutDown{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,500px,0)}}@keyframes Toastify__slideOutUp{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,-500px,0)}}.Toastify__slide-enter--top-left,.Toastify__slide-enter--bottom-left{animation-name:Toastify__slideInLeft}.Toastify__slide-enter--top-right,.Toastify__slide-enter--bottom-right{animation-name:Toastify__slideInRight}.Toastify__slide-enter--top-center{animation-name:Toastify__slideInDown}.Toastify__slide-enter--bottom-center{animation-name:Toastify__slideInUp}.Toastify__slide-exit--top-left,.Toastify__slide-exit--bottom-left{animation-name:Toastify__slideOutLeft;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-right,.Toastify__slide-exit--bottom-right{animation-name:Toastify__slideOutRight;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-center{animation-name:Toastify__slideOutUp;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--bottom-center{animation-name:Toastify__slideOutDown;animation-timing-function:ease-in;animation-duration:.3s}@keyframes Toastify__spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n`);\n\nvar L = (t)=>typeof t == \"number\" && !isNaN(t), N = (t)=>typeof t == \"string\", P = (t)=>typeof t == \"function\", mt = (t)=>N(t) || L(t), B = (t)=>N(t) || P(t) ? t : null, pt = (t, o)=>t === !1 || L(t) && t > 0 ? t : o, z = (t)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(t) || N(t) || P(t) || L(t);\n\nfunction Z(t, o, e = 300) {\n    let { scrollHeight: r, style: s } = t;\n    requestAnimationFrame(()=>{\n        s.minHeight = \"initial\", s.height = r + \"px\", s.transition = `all ${e}ms`, requestAnimationFrame(()=>{\n            s.height = \"0\", s.padding = \"0\", s.margin = \"0\", setTimeout(o, e);\n        });\n    });\n}\nfunction $({ enter: t, exit: o, appendPosition: e = !1, collapse: r = !0, collapseDuration: s = 300 }) {\n    return function({ children: a, position: d, preventExitTransition: c, done: T, nodeRef: g, isIn: v, playToast: x }) {\n        let C = e ? `${t}--${d}` : t, S = e ? `${o}--${d}` : o, E = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n            let f = g.current, p = C.split(\" \"), b = (n)=>{\n                n.target === g.current && (x(), f.removeEventListener(\"animationend\", b), f.removeEventListener(\"animationcancel\", b), E.current === 0 && n.type !== \"animationcancel\" && f.classList.remove(...p));\n            };\n            (()=>{\n                f.classList.add(...p), f.addEventListener(\"animationend\", b), f.addEventListener(\"animationcancel\", b);\n            })();\n        }, []), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            let f = g.current, p = ()=>{\n                f.removeEventListener(\"animationend\", p), r ? Z(f, T, s) : T();\n            };\n            v || (c ? p() : (()=>{\n                E.current = 1, f.className += ` ${S}`, f.addEventListener(\"animationend\", p);\n            })());\n        }, [\n            v\n        ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, a);\n    };\n}\n\nfunction J(t, o) {\n    return {\n        content: tt(t.content, t.props),\n        containerId: t.props.containerId,\n        id: t.props.toastId,\n        theme: t.props.theme,\n        type: t.props.type,\n        data: t.props.data || {},\n        isLoading: t.props.isLoading,\n        icon: t.props.icon,\n        reason: t.removalReason,\n        status: o\n    };\n}\nfunction tt(t, o, e = !1) {\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(t) && !N(t.type) ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(t, {\n        closeToast: o.closeToast,\n        toastProps: o,\n        data: o.data,\n        isPaused: e\n    }) : P(t) ? t({\n        closeToast: o.closeToast,\n        toastProps: o,\n        data: o.data,\n        isPaused: e\n    }) : t;\n}\n\nfunction yt({ closeToast: t, theme: o, ariaLabel: e = \"close\" }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: `Toastify__close-button Toastify__close-button--${o}`,\n        type: \"button\",\n        onClick: (r)=>{\n            r.stopPropagation(), t(!0);\n        },\n        \"aria-label\": e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        \"aria-hidden\": \"true\",\n        viewBox: \"0 0 14 16\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n    })));\n}\n\n\nfunction gt({ delay: t, isRunning: o, closeToast: e, type: r = \"default\", hide: s, className: l, controlledProgress: a, progress: d, rtl: c, isIn: T, theme: g }) {\n    let v = s || a && d === 0, x = {\n        animationDuration: `${t}ms`,\n        animationPlayState: o ? \"running\" : \"paused\"\n    };\n    a && (x.transform = `scaleX(${d})`);\n    let C = (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__progress-bar\", a ? \"Toastify__progress-bar--controlled\" : \"Toastify__progress-bar--animated\", `Toastify__progress-bar-theme--${g}`, `Toastify__progress-bar--${r}`, {\n        [\"Toastify__progress-bar--rtl\"]: c\n    }), S = P(l) ? l({\n        rtl: c,\n        type: r,\n        defaultClassName: C\n    }) : (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(C, l), E = {\n        [a && d >= 1 ? \"onTransitionEnd\" : \"onAnimationEnd\"]: a && d < 1 ? null : ()=>{\n            T && e();\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"Toastify__progress-bar--wrp\",\n        \"data-hidden\": v\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: `Toastify__progress-bar--bg Toastify__progress-bar-theme--${g} Toastify__progress-bar--${r}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        role: \"progressbar\",\n        \"aria-hidden\": v ? \"true\" : \"false\",\n        \"aria-label\": \"notification timer\",\n        className: S,\n        style: x,\n        ...E\n    }));\n}\n\n\nvar Xt = 1, at = ()=>`${Xt++}`;\nfunction _t(t, o, e) {\n    let r = 1, s = 0, l = [], a = [], d = o, c = new Map, T = new Set, g = (i)=>(T.add(i), ()=>T.delete(i)), v = ()=>{\n        a = Array.from(c.values()), T.forEach((i)=>i());\n    }, x = ({ containerId: i, toastId: n, updateId: u })=>{\n        let h = i ? i !== t : t !== 1, m = c.has(n) && u == null;\n        return h || m;\n    }, C = (i, n)=>{\n        c.forEach((u)=>{\n            var h;\n            (n == null || n === u.props.toastId) && ((h = u.toggle) == null || h.call(u, i));\n        });\n    }, S = (i)=>{\n        var n, u;\n        (u = (n = i.props) == null ? void 0 : n.onClose) == null || u.call(n, i.removalReason), i.isActive = !1;\n    }, E = (i)=>{\n        if (i == null) c.forEach(S);\n        else {\n            let n = c.get(i);\n            n && S(n);\n        }\n        v();\n    }, f = ()=>{\n        s -= l.length, l = [];\n    }, p = (i)=>{\n        var m, _;\n        let { toastId: n, updateId: u } = i.props, h = u == null;\n        i.staleId && c.delete(i.staleId), i.isActive = !0, c.set(n, i), v(), e(J(i, h ? \"added\" : \"updated\")), h && ((_ = (m = i.props).onOpen) == null || _.call(m));\n    };\n    return {\n        id: t,\n        props: d,\n        observe: g,\n        toggle: C,\n        removeToast: E,\n        toasts: c,\n        clearQueue: f,\n        buildToast: (i, n)=>{\n            if (x(n)) return;\n            let { toastId: u, updateId: h, data: m, staleId: _, delay: k } = n, M = h == null;\n            M && s++;\n            let A = {\n                ...d,\n                style: d.toastStyle,\n                key: r++,\n                ...Object.fromEntries(Object.entries(n).filter(([D, Y])=>Y != null)),\n                toastId: u,\n                updateId: h,\n                data: m,\n                isIn: !1,\n                className: B(n.className || d.toastClassName),\n                progressClassName: B(n.progressClassName || d.progressClassName),\n                autoClose: n.isLoading ? !1 : pt(n.autoClose, d.autoClose),\n                closeToast (D) {\n                    c.get(u).removalReason = D, E(u);\n                },\n                deleteToast () {\n                    let D = c.get(u);\n                    if (D != null) {\n                        if (e(J(D, \"removed\")), c.delete(u), s--, s < 0 && (s = 0), l.length > 0) {\n                            p(l.shift());\n                            return;\n                        }\n                        v();\n                    }\n                }\n            };\n            A.closeButton = d.closeButton, n.closeButton === !1 || z(n.closeButton) ? A.closeButton = n.closeButton : n.closeButton === !0 && (A.closeButton = z(d.closeButton) ? d.closeButton : !0);\n            let R = {\n                content: i,\n                props: A,\n                staleId: _\n            };\n            d.limit && d.limit > 0 && s > d.limit && M ? l.push(R) : L(k) ? setTimeout(()=>{\n                p(R);\n            }, k) : p(R);\n        },\n        setProps (i) {\n            d = i;\n        },\n        setToggle: (i, n)=>{\n            let u = c.get(i);\n            u && (u.toggle = n);\n        },\n        isToastActive: (i)=>{\n            var n;\n            return (n = c.get(i)) == null ? void 0 : n.isActive;\n        },\n        getSnapshot: ()=>a\n    };\n}\nvar I = new Map, F = [], st = new Set, Vt = (t)=>st.forEach((o)=>o(t)), bt = ()=>I.size > 0;\nfunction Qt() {\n    F.forEach((t)=>nt(t.content, t.options)), F = [];\n}\nvar vt = (t, { containerId: o })=>{\n    var e;\n    return (e = I.get(o || 1)) == null ? void 0 : e.toasts.get(t);\n};\nfunction X(t, o) {\n    var r;\n    if (o) return !!((r = I.get(o)) != null && r.isToastActive(t));\n    let e = !1;\n    return I.forEach((s)=>{\n        s.isToastActive(t) && (e = !0);\n    }), e;\n}\nfunction ht(t) {\n    if (!bt()) {\n        F = F.filter((o)=>t != null && o.options.toastId !== t);\n        return;\n    }\n    if (t == null || mt(t)) I.forEach((o)=>{\n        o.removeToast(t);\n    });\n    else if (t && (\"containerId\" in t || \"id\" in t)) {\n        let o = I.get(t.containerId);\n        o ? o.removeToast(t.id) : I.forEach((e)=>{\n            e.removeToast(t.id);\n        });\n    }\n}\nvar Ct = (t = {})=>{\n    I.forEach((o)=>{\n        o.props.limit && (!t.containerId || o.id === t.containerId) && o.clearQueue();\n    });\n};\nfunction nt(t, o) {\n    z(t) && (bt() || F.push({\n        content: t,\n        options: o\n    }), I.forEach((e)=>{\n        e.buildToast(t, o);\n    }));\n}\nfunction xt(t) {\n    var o;\n    (o = I.get(t.containerId || 1)) == null || o.setToggle(t.id, t.fn);\n}\nfunction rt(t, o) {\n    I.forEach((e)=>{\n        (o == null || !(o != null && o.containerId) || (o == null ? void 0 : o.containerId) === e.id) && e.toggle(t, o == null ? void 0 : o.id);\n    });\n}\nfunction Et(t) {\n    let o = t.containerId || 1;\n    return {\n        subscribe (e) {\n            let r = _t(o, t, Vt);\n            I.set(o, r);\n            let s = r.observe(e);\n            return Qt(), ()=>{\n                s(), I.delete(o);\n            };\n        },\n        setProps (e) {\n            var r;\n            (r = I.get(o)) == null || r.setProps(e);\n        },\n        getSnapshot () {\n            var e;\n            return (e = I.get(o)) == null ? void 0 : e.getSnapshot();\n        }\n    };\n}\nfunction Pt(t) {\n    return st.add(t), ()=>{\n        st.delete(t);\n    };\n}\nfunction Wt(t) {\n    return t && (N(t.toastId) || L(t.toastId)) ? t.toastId : at();\n}\nfunction U(t, o) {\n    return nt(t, o), o.toastId;\n}\nfunction V(t, o) {\n    return {\n        ...o,\n        type: o && o.type || t,\n        toastId: Wt(o)\n    };\n}\nfunction Q(t) {\n    return (o, e)=>U(o, V(t, e));\n}\nfunction y(t, o) {\n    return U(t, V(\"default\", o));\n}\ny.loading = (t, o)=>U(t, V(\"default\", {\n        isLoading: !0,\n        autoClose: !1,\n        closeOnClick: !1,\n        closeButton: !1,\n        draggable: !1,\n        ...o\n    }));\nfunction Gt(t, { pending: o, error: e, success: r }, s) {\n    let l;\n    o && (l = N(o) ? y.loading(o, s) : y.loading(o.render, {\n        ...s,\n        ...o\n    }));\n    let a = {\n        isLoading: null,\n        autoClose: null,\n        closeOnClick: null,\n        closeButton: null,\n        draggable: null\n    }, d = (T, g, v)=>{\n        if (g == null) {\n            y.dismiss(l);\n            return;\n        }\n        let x = {\n            type: T,\n            ...a,\n            ...s,\n            data: v\n        }, C = N(g) ? {\n            render: g\n        } : g;\n        return l ? y.update(l, {\n            ...x,\n            ...C\n        }) : y(C.render, {\n            ...x,\n            ...C\n        }), v;\n    }, c = P(t) ? t() : t;\n    return c.then((T)=>d(\"success\", r, T)).catch((T)=>d(\"error\", e, T)), c;\n}\ny.promise = Gt;\ny.success = Q(\"success\");\ny.info = Q(\"info\");\ny.error = Q(\"error\");\ny.warning = Q(\"warning\");\ny.warn = y.warning;\ny.dark = (t, o)=>U(t, V(\"default\", {\n        theme: \"dark\",\n        ...o\n    }));\nfunction qt(t) {\n    ht(t);\n}\ny.dismiss = qt;\ny.clearWaitingQueue = Ct;\ny.isActive = X;\ny.update = (t, o = {})=>{\n    let e = vt(t, o);\n    if (e) {\n        let { props: r, content: s } = e, l = {\n            delay: 100,\n            ...r,\n            ...o,\n            toastId: o.toastId || t,\n            updateId: at()\n        };\n        l.toastId !== t && (l.staleId = t);\n        let a = l.render || s;\n        delete l.render, U(a, l);\n    }\n};\ny.done = (t)=>{\n    y.update(t, {\n        progress: 1\n    });\n};\ny.onChange = Pt;\ny.play = (t)=>rt(!0, t);\ny.pause = (t)=>rt(!1, t);\n\nfunction It(t) {\n    var a;\n    let { subscribe: o, getSnapshot: e, setProps: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Et(t)).current;\n    r(t);\n    let s = (a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(o, e, e)) == null ? void 0 : a.slice();\n    function l(d) {\n        if (!s) return [];\n        let c = new Map;\n        return t.newestOnTop && s.reverse(), s.forEach((T)=>{\n            let { position: g } = T.props;\n            c.has(g) || c.set(g, []), c.get(g).push(T);\n        }), Array.from(c, (T)=>d(T[0], T[1]));\n    }\n    return {\n        getToastToRender: l,\n        isToastActive: X,\n        count: s == null ? void 0 : s.length\n    };\n}\n\nfunction At(t) {\n    let [o, e] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        start: 0,\n        delta: 0,\n        removalDistance: 0,\n        canCloseOnClick: !0,\n        canDrag: !1,\n        didMove: !1\n    }).current, { autoClose: d, pauseOnHover: c, closeToast: T, onClick: g, closeOnClick: v } = t;\n    xt({\n        id: t.toastId,\n        containerId: t.containerId,\n        fn: e\n    }), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (t.pauseOnFocusLoss) return x(), ()=>{\n            C();\n        };\n    }, [\n        t.pauseOnFocusLoss\n    ]);\n    function x() {\n        document.hasFocus() || p(), window.addEventListener(\"focus\", f), window.addEventListener(\"blur\", p);\n    }\n    function C() {\n        window.removeEventListener(\"focus\", f), window.removeEventListener(\"blur\", p);\n    }\n    function S(m) {\n        if (t.draggable === !0 || t.draggable === m.pointerType) {\n            b();\n            let _ = l.current;\n            a.canCloseOnClick = !0, a.canDrag = !0, _.style.transition = \"none\", t.draggableDirection === \"x\" ? (a.start = m.clientX, a.removalDistance = _.offsetWidth * (t.draggablePercent / 100)) : (a.start = m.clientY, a.removalDistance = _.offsetHeight * (t.draggablePercent === 80 ? t.draggablePercent * 1.5 : t.draggablePercent) / 100);\n        }\n    }\n    function E(m) {\n        let { top: _, bottom: k, left: M, right: A } = l.current.getBoundingClientRect();\n        m.nativeEvent.type !== \"touchend\" && t.pauseOnHover && m.clientX >= M && m.clientX <= A && m.clientY >= _ && m.clientY <= k ? p() : f();\n    }\n    function f() {\n        e(!0);\n    }\n    function p() {\n        e(!1);\n    }\n    function b() {\n        a.didMove = !1, document.addEventListener(\"pointermove\", n), document.addEventListener(\"pointerup\", u);\n    }\n    function i() {\n        document.removeEventListener(\"pointermove\", n), document.removeEventListener(\"pointerup\", u);\n    }\n    function n(m) {\n        let _ = l.current;\n        if (a.canDrag && _) {\n            a.didMove = !0, o && p(), t.draggableDirection === \"x\" ? a.delta = m.clientX - a.start : a.delta = m.clientY - a.start, a.start !== m.clientX && (a.canCloseOnClick = !1);\n            let k = t.draggableDirection === \"x\" ? `${a.delta}px, var(--y)` : `0, calc(${a.delta}px + var(--y))`;\n            _.style.transform = `translate3d(${k},0)`, _.style.opacity = `${1 - Math.abs(a.delta / a.removalDistance)}`;\n        }\n    }\n    function u() {\n        i();\n        let m = l.current;\n        if (a.canDrag && a.didMove && m) {\n            if (a.canDrag = !1, Math.abs(a.delta) > a.removalDistance) {\n                s(!0), t.closeToast(!0), t.collapseAll();\n                return;\n            }\n            m.style.transition = \"transform 0.2s, opacity 0.2s\", m.style.removeProperty(\"transform\"), m.style.removeProperty(\"opacity\");\n        }\n    }\n    let h = {\n        onPointerDown: S,\n        onPointerUp: E\n    };\n    return d && c && (h.onMouseEnter = p, t.stacked || (h.onMouseLeave = f)), v && (h.onClick = (m)=>{\n        g && g(m), a.canCloseOnClick && T(!0);\n    }), {\n        playToast: f,\n        pauseToast: p,\n        isRunning: o,\n        preventExitTransition: r,\n        toastRef: l,\n        eventHandlers: h\n    };\n}\n\nvar Ot =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n\n\nvar G = ({ theme: t, type: o, isLoading: e, ...r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        viewBox: \"0 0 24 24\",\n        width: \"100%\",\n        height: \"100%\",\n        fill: t === \"colored\" ? \"currentColor\" : `var(--toastify-icon-color-${o})`,\n        ...r\n    });\nfunction ao(t) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(G, {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\"\n    }));\n}\nfunction so(t) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(G, {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\"\n    }));\n}\nfunction no(t) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(G, {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\"\n    }));\n}\nfunction ro(t) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(G, {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\"\n    }));\n}\nfunction io() {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"Toastify__spinner\"\n    });\n}\nvar W = {\n    info: so,\n    warning: ao,\n    success: no,\n    error: ro,\n    spinner: io\n}, lo = (t)=>t in W;\nfunction Nt({ theme: t, type: o, isLoading: e, icon: r }) {\n    let s = null, l = {\n        theme: t,\n        type: o\n    };\n    return r === !1 || (P(r) ? s = r({\n        ...l,\n        isLoading: e\n    }) : /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(r) ? s = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(r, l) : e ? s = W.spinner() : lo(o) && (s = W[o](l))), s;\n}\nvar wt = (t)=>{\n    let { isRunning: o, preventExitTransition: e, toastRef: r, eventHandlers: s, playToast: l } = At(t), { closeButton: a, children: d, autoClose: c, onClick: T, type: g, hideProgressBar: v, closeToast: x, transition: C, position: S, className: E, style: f, progressClassName: p, updateId: b, role: i, progress: n, rtl: u, toastId: h, deleteToast: m, isIn: _, isLoading: k, closeOnClick: M, theme: A, ariaLabel: R } = t, D = (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__toast\", `Toastify__toast-theme--${A}`, `Toastify__toast--${g}`, {\n        [\"Toastify__toast--rtl\"]: u\n    }, {\n        [\"Toastify__toast--close-on-click\"]: M\n    }), Y = P(E) ? E({\n        rtl: u,\n        position: S,\n        type: g,\n        defaultClassName: D\n    }) : (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(D, E), ft = Nt(t), dt = !!n || !c, j = {\n        closeToast: x,\n        type: g,\n        theme: A\n    }, H = null;\n    return a === !1 || (P(a) ? H = a(j) : /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(a) ? H = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(a, j) : H = yt(j)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(C, {\n        isIn: _,\n        done: m,\n        position: S,\n        preventExitTransition: e,\n        nodeRef: r,\n        playToast: l\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        id: h,\n        tabIndex: 0,\n        onClick: T,\n        \"data-in\": _,\n        className: Y,\n        ...s,\n        style: f,\n        ref: r,\n        ..._ && {\n            role: i,\n            \"aria-label\": R\n        }\n    }, ft != null && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__toast-icon\", {\n            [\"Toastify--animate-icon Toastify__zoom-enter\"]: !k\n        })\n    }, ft), tt(d, t, !o), H, !t.customProgressBar && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(gt, {\n        ...b && !dt ? {\n            key: `p-${b}`\n        } : {},\n        rtl: u,\n        theme: A,\n        delay: c,\n        isRunning: o,\n        isIn: _,\n        closeToast: x,\n        hide: v,\n        type: g,\n        className: p,\n        controlledProgress: dt,\n        progress: n || 0\n    })));\n};\nvar K = (t, o = !1)=>({\n        enter: `Toastify--animate Toastify__${t}-enter`,\n        exit: `Toastify--animate Toastify__${t}-exit`,\n        appendPosition: o\n    }), lt = $(K(\"bounce\", !0)), mo = $(K(\"slide\", !0)), po = $(K(\"zoom\")), uo = $(K(\"flip\"));\nvar _o = {\n    position: \"top-right\",\n    transition: lt,\n    autoClose: 5e3,\n    closeButton: !0,\n    pauseOnHover: !0,\n    pauseOnFocusLoss: !0,\n    draggable: \"touch\",\n    draggablePercent: 80,\n    draggableDirection: \"x\",\n    role: \"alert\",\n    theme: \"light\",\n    \"aria-label\": \"Notifications Alt+T\",\n    hotKeys: (t)=>t.altKey && t.code === \"KeyT\"\n};\nfunction Lt(t) {\n    let o = {\n        ..._o,\n        ...t\n    }, e = t.stacked, [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), { getToastToRender: a, isToastActive: d, count: c } = It(o), { className: T, style: g, rtl: v, containerId: x, hotKeys: C } = o;\n    function S(f) {\n        let p = (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__toast-container\", `Toastify__toast-container--${f}`, {\n            [\"Toastify__toast-container--rtl\"]: v\n        });\n        return P(T) ? T({\n            position: f,\n            rtl: v,\n            defaultClassName: p\n        }) : (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(p, B(T));\n    }\n    function E() {\n        e && (s(!0), y.play());\n    }\n    return Ot(()=>{\n        var f;\n        if (e) {\n            let p = l.current.querySelectorAll('[data-in=\"true\"]'), b = 12, i = (f = o.position) == null ? void 0 : f.includes(\"top\"), n = 0, u = 0;\n            Array.from(p).reverse().forEach((h, m)=>{\n                let _ = h;\n                _.classList.add(\"Toastify__toast--stacked\"), m > 0 && (_.dataset.collapsed = `${r}`), _.dataset.pos || (_.dataset.pos = i ? \"top\" : \"bot\");\n                let k = n * (r ? .2 : 1) + (r ? 0 : b * m);\n                _.style.setProperty(\"--y\", `${i ? k : k * -1}px`), _.style.setProperty(\"--g\", `${b}`), _.style.setProperty(\"--s\", `${1 - (r ? u : 0)}`), n += _.offsetHeight, u += .025;\n            });\n        }\n    }, [\n        r,\n        c,\n        e\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        function f(p) {\n            var i;\n            let b = l.current;\n            C(p) && ((i = b.querySelector('[tabIndex=\"0\"]')) == null || i.focus(), s(!1), y.pause()), p.key === \"Escape\" && (document.activeElement === b || b != null && b.contains(document.activeElement)) && (s(!0), y.play());\n        }\n        return document.addEventListener(\"keydown\", f), ()=>{\n            document.removeEventListener(\"keydown\", f);\n        };\n    }, [\n        C\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", {\n        ref: l,\n        className: \"Toastify\",\n        id: x,\n        onMouseEnter: ()=>{\n            e && (s(!1), y.pause());\n        },\n        onMouseLeave: E,\n        \"aria-live\": \"polite\",\n        \"aria-atomic\": \"false\",\n        \"aria-relevant\": \"additions text\",\n        \"aria-label\": o[\"aria-label\"]\n    }, a((f, p)=>{\n        let b = p.length ? {\n            ...g\n        } : {\n            ...g,\n            pointerEvents: \"none\"\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            tabIndex: -1,\n            className: S(f),\n            \"data-stacked\": e,\n            style: b,\n            key: `c-${f}`\n        }, p.map(({ content: i, props: n })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(wt, {\n                ...n,\n                stacked: e,\n                collapseAll: E,\n                isIn: d(n.toastId, n.containerId),\n                key: `t-${n.key}`\n            }, i)));\n    }));\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-toastify/dist/index.mjs\n");

/***/ })

};
;